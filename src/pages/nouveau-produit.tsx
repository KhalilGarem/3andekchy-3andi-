import Head from "next/head";
import { useState } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { type ImageType } from "react-images-uploading";
import ArtSection from "~/components/nouveau-produit/art-section";
import ImageUploader from "~/components/nouveau-produit/image-uploader";
import {
  CreateProductInputType,
  createProductSchema,
} from "~/validation/createProductSchema";
import { useForm } from "react-hook-form";
import { api } from "~/utils/api";
import uploadImageService from "~/services/uploadImageService";
import { useRouter } from "next/navigation";

/**
 * Page Nouveau Produit
 * Une page dynamic contient le formulaire d'ajout de produit
 */
export default function NouveauProduit() {
  // Router
  const router = useRouter();

  // Image State
  const [image, setImage] = useState<ImageType[]>([]);

  // OnSubmit Loading State
  const [submitLoding, setSubmitLoding] = useState<boolean>(false);

  // Create Product Form Hook
  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    setError,
  } = useForm<CreateProductInputType>({
    resolver: zodResolver(createProductSchema.omit({ imageUrl: true })),
  });

  // Create Product Mutation
  const createProductMutation = api.product.createProduct.useMutation({
    onSuccess: () => {
      setImage([]);
      reset();
      router.push("/mes-produit");
    },
  });

  // On Submit Function
  const onCreateProduct = async (data: CreateProductInputType) => {
    if (!image[0]) {
      return setError("imageUrl", {
        type: "required",
        message: "Veuillez sélectionner une image.",
      });
    }

    try {
      // Start Loading
      setSubmitLoding(true);
      // Upload Images With Upload Service
      const imageRes = await uploadImageService(image[0]);
      // Check Service Responses
      if (!imageRes) {
        return setError("imageUrl", {
          type: "required",
          message: "Erreur lors du téléchargement d'images.",
        });
      }
      // Mutate Product
      createProductMutation.mutate({
        ...data,
        imageUrl: imageRes.secure_url,
      });
    } catch (error) {
      return setError("imageUrl", {
        type: "required",
        message: "Erreur lors du téléchargement d'images.",
      });
    } finally {
      // End Loading
      setSubmitLoding(false);
    }
  };

  return (
    <>
      <Head>
        <title>3andekchy ? 3andi ?</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="pt-16">
        {/* Art Section */}
        <ArtSection />
        <form
          onSubmit={handleSubmit(onCreateProduct)}
          className="flex flex-col items-center justify-center bg-white py-12"
        >
          {/* Informative section */}
          <div className="w-[864px] space-y-2 py-4">
            <h1 className="font-amaranth text-3xl font-bold text-primary">
              Ajouter un produit
            </h1>
            <p className="text-justify font-roboto text-lg">
              Pour ajouter un nouveau produit, veuillez compléter le formulaire
              actuel fourni. Remplissez tous les champs obligatoires avec
              précision afin de garantir le traitement correct et rapide de
              votre demande. Vérifiez attentivement les informations que vous
              fournissez pour éviter toute erreur ou omission. Votre coopération
              dans la complétion du formulaire nous aidera à ajouter
              efficacement le nouveau produit à notre base de données. Merci de
              votre attention et de votre aide dans cette démarche.
            </p>
          </div>
          {/* Type & Nom de produit */}
          <div className="grid grid-cols-2 gap-16">
            {/* Type du produit */}
            <div className="form-control w-[400px]">
              {/* Type du produit label */}
              <label htmlFor="type" className="label font-bold">
                <span className="label-text">Type:</span>
              </label>
              <select
                className="select-primary select bg-white"
                {...register("type")}
              >
                <option disabled selected value={undefined}>
                  Selectionner le type du produit
                </option>
                <option>Habillment</option>
                <option>Alimentaire</option>
              </select>
              {/* Type du produit erreur */}
              <label className="label">
                <span className="label-text-alt"></span>
                <span className="label-text-alt text-error">
                  {errors.type?.message}
                </span>
              </label>
            </div>
            {/* Nom du produit */}
            <div className="form-control w-[400px]">
              {/* Nom du produit label */}
              <label htmlFor="nom" className="label font-bold">
                <span className="label-text">Nom:</span>
              </label>
              <input
                id="nom"
                type="text"
                placeholder="Entrer le nom du produit ici..."
                className="input-bordered input-primary input bg-white"
                {...register("name")}
              />
              {/* Nom du produit erreur */}
              <label className="label">
                <span className="label-text-alt"></span>
                <span className="label-text-alt text-error">
                  {errors.name?.message}
                </span>
              </label>
            </div>
          </div>
          {/* Prix & Quantité */}
          <div className="grid grid-cols-2 gap-16">
            {/* Prix  du produit */}
            <div className="form-control w-[400px]">
              {/* Prix du produit label */}
              <label htmlFor="prix" className="label font-bold">
                <span className="label-text">Prix:</span>
              </label>
              <input
                id="prix"
                type="number"
                placeholder="Entrer le prix du produit ici..."
                className="input-bordered input-primary input bg-white"
                {...register("price", { valueAsNumber: true })}
              />
              {/* Prix du produit erreur */}
              <label className="label">
                <span className="label-text-alt"></span>
                <span className="label-text-alt text-error">
                  {errors.price?.message}
                </span>
              </label>
            </div>
            {/* Quantité du produit */}
            <div className="form-control w-[400px]">
              {/* Quantité du produit label */}
              <label htmlFor="quantity" className="label font-bold">
                <span className="label-text">Quantité:</span>
              </label>
              <input
                id="quantity"
                type="number"
                placeholder="Entrer le quantité du produit ici..."
                className="input-bordered input-primary input bg-white"
                {...register("quantity", { valueAsNumber: true })}
              />
              {/* Quantité du produit erreur */}
              <label className="label">
                <span className="label-text-alt"></span>
                <span className="label-text-alt text-error">
                  {errors.quantity?.message}
                </span>
              </label>
            </div>
          </div>
          {/* Image & Description */}
          <div className="grid grid-cols-2 gap-16">
            {/* Image */}
            <div className="relative">
              {/* Back Image */}
              <ImageUploader
                image={image}
                setImage={setImage}
                label="Image du produit."
              />
              {/* Quantité du produit erreur */}
              <label className="absolute bottom-2 right-0 pr-1">
                <span className="label-text-alt text-error">
                  {errors.imageUrl?.message}
                </span>
              </label>
            </div>
            {/* Description */}
            <div className="form-control w-[400px]">
              {/* Description label */}
              <label className="label font-bold">
                <span className="label-text">Description:</span>
              </label>
              <textarea
                className="textarea-bordered textarea-primary textarea h-[275px] bg-white"
                placeholder="Entrer la description du produit ici..."
                {...register("description")}
              />
              {/* Desctription du produit erreur */}
              <label className="label">
                <span className="label-text-alt"></span>
                <span className="label-text-alt text-error">
                  {errors.description?.message}
                </span>
              </label>
            </div>
          </div>
          {/* Submit */}
          <div className="py-4">
            <button className="btn-primary btn font-bold">
              Ajouter{" "}
              {submitLoding && (
                <span className="loading loading-ring loading-md"></span>
              )}
            </button>
          </div>
        </form>
      </main>
    </>
  );
}
